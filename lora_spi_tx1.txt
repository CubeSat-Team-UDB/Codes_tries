#include <Arduino.h>
#include <RadioLib.h>
#include <Wire.h>

#define I2C_ADDRESS 0x08  // Dirección I2C del ESP32

int pin_cs =        PIN_SPI_SS;
int pin_dio0 =      D0;
int pin_tx_enable = PWM0;
int pin_rx_enable = G0;
int pin_nrst =      G1;
int pin_dio1 =      G2;

SX1276 radio = new Module(pin_cs, pin_dio0, pin_nrst, pin_dio1);

String receivedData = "";

void receiveEvent(int bytes) {
  receivedData = "";
  while (Wire.available()) {
    char c = Wire.read();
    receivedData += c;
  }
  Serial.print(F("[I2C] Data received: "));
  Serial.println(receivedData);
}

void setup() {
  Serial.begin(115200);
  Wire.begin(I2C_ADDRESS);
  Wire.onReceive(receiveEvent);

  // Inicializar el módulo LoRa
  Serial.print(F("[SX1276] Initializing ... "));
  int state = radio.begin(915.0, 125.0, 9, 7, 0x34, 10, 8, 0);
  if (state == RADIOLIB_ERR_NONE) {
    Serial.println(F("success!"));
  } else {
    Serial.print(F("failed, code "));
    Serial.println(state);
    while (true);
  }

  // Mostrar data rate
  Serial.print(F("[SX1276] Datarate:\t"));
  Serial.print(radio.getDataRate());
  Serial.println(F(" bps"));
}

void loop() {
  // Enviar mensaje de prueba
  char message[] = "Hola, SparkFun!";
  Serial.print(F("[SX1276] Transmitting packet ... "));
  int state = radio.transmit(message);

  if (state == RADIOLIB_ERR_NONE) {
    Serial.println(F("success!"));
  } else {
    Serial.print(F("failed, code "));
    Serial.println(state);
  }

  // Si hay datos recibidos por I2C, enviarlos por LoRa
  if (receivedData.length() > 0) {
    Serial.print(F("[SX1276] Transmitting I2C data: "));
    Serial.println(receivedData);
    state = radio.transmit(receivedData.c_str());

    if (state == RADIOLIB_ERR_NONE) {
      Serial.println(F("success!"));
    } else {
      Serial.print(F("failed, code "));
      Serial.println(state);
    }
    receivedData = "";  // Limpiar buffer después de la transmisión
  }

  delay(5000);
}
